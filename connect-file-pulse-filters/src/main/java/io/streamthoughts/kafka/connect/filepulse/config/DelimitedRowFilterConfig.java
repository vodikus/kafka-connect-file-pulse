/*
 * Copyright 2019-2020 StreamThoughts.
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.streamthoughts.kafka.connect.filepulse.config;

import io.streamthoughts.kafka.connect.filepulse.data.Schema;
import io.streamthoughts.kafka.connect.filepulse.data.StructSchema;
import io.streamthoughts.kafka.connect.filepulse.data.Type;
import java.util.Arrays;
import java.util.Map;
import java.util.stream.Collectors;
import org.apache.kafka.common.config.ConfigDef;
import org.apache.kafka.common.config.ConfigException;
import org.apache.kafka.common.utils.ConfigUtils;

public class DelimitedRowFilterConfig extends CommonFilterConfig {

    private static final String GROUP_DELIMITED_ROW_FILTER = "Delimited Row Common";

    public static final String READER_FIELD_TRIM_COLUMN_CONFIG = "trim.column";
    /* for backward-compatibility */
    public static final String READER_FIELD_TRIM_COLUMN_CONFIG_ALIAS = "trimColumn";
    public static final String READER_FIELD_TRIM_COLUMN_DOC = "Remove the leading and trailing whitespaces from all columns.";
    public static final boolean READER_FIELD_TRIM_COLUMN_DEFAULT = false;
    public static final String READER_FIELD_DUPLICATE_COLUMNS_AS_ARRAY_CONFIG = "duplicate.columns.as.array";
    /* for backward-compatibility */
    public static final String READER_FIELD_DUPLICATE_COLUMNS_AS_ARRAY_CONFIG_ALIAS = "duplicateColumnsAsArray";
    public static final String READER_FIELD_DUPLICATE_COLUMNS_AS_ARRAY_DOC = "Treat duplicate columns as an array. If false and a record contains duplicate columns an exception will be thrown.";
    public static final String READER_FIELD_DUPLICATE_COLUMNS_AS_ARRAY_DEFAULT = "false";

    public static final String READER_EXTRACT_COLUMN_NAME_CONFIG = "extract.column.name";
    /* for backward-compatibility */
    public static final String READER_EXTRACT_COLUMN_NAME_CONFIG_ALIAS = "extractColumnName";
    public static final String READER_EXTRACT_COLUMN_NAME_DOC = "Define the field from which the schema should be detected (all columns will be of type 'string')";

    public static final String READER_AUTO_GENERATE_COLUMN_NAME_CONFIG = "auto.generate.column.names";
    /* for backward-compatibility */
    public static final String READER_AUTO_GENERATE_COLUMN_NAME_CONFIG_ALIAS = "autoGenerateColumnNames";
    public static final String READER_AUTO_GENERATE_COLUMN_NAME_DOC = "Define whether column names should autogenerated or not (column names will of the form 'column1, column2')";
    public static final boolean READER_AUTO_GENERATE_COLUMN_NAME_DEFAULT = true;

    public static final String READER_FIELD_COLUMNS_CONFIG = "columns";
    public static final String READER_FIELD_COLUMNS_DOC = "The list of comma-separated column names in order they appear in each row. columns must be in the form of NAME:TYPE";
    private static final String READER_FIELD_COLUMNS_SEPARATOR = ";";

    /**
     * Creates a new {@link DelimitedRowFilterConfig} instance.
     *
     * @param originals the configuration.
     */
    public DelimitedRowFilterConfig(final Map<String, ?> originals) {
        this(configDef(), originals);
    }

    public DelimitedRowFilterConfig(final ConfigDef configDef,
                                    final Map<String, ?> originals) {
        super(
            configDef,
            ConfigUtils.translateDeprecatedConfigs(originals, new String[][]{
                    {READER_FIELD_TRIM_COLUMN_CONFIG, READER_FIELD_TRIM_COLUMN_CONFIG_ALIAS},
                    {READER_FIELD_DUPLICATE_COLUMNS_AS_ARRAY_CONFIG, READER_FIELD_DUPLICATE_COLUMNS_AS_ARRAY_CONFIG_ALIAS},
                    {READER_EXTRACT_COLUMN_NAME_CONFIG, READER_EXTRACT_COLUMN_NAME_CONFIG_ALIAS},
                    {READER_AUTO_GENERATE_COLUMN_NAME_CONFIG, READER_AUTO_GENERATE_COLUMN_NAME_CONFIG_ALIAS},
            })
        );
    }


    public String extractColumnName() {
        return getString(READER_EXTRACT_COLUMN_NAME_CONFIG);
    }

    public boolean isTrimColumn() {
        return getBoolean(READER_FIELD_TRIM_COLUMN_CONFIG);
    }

    public boolean isAutoGenerateColumnNames() {
        return getBoolean(READER_AUTO_GENERATE_COLUMN_NAME_CONFIG);
    }

    public boolean isDuplicateColumnsAsArray() {
        return getBoolean(READER_FIELD_DUPLICATE_COLUMNS_AS_ARRAY_CONFIG);
    }

    public StructSchema schema() {
        final String columns = getString(READER_FIELD_COLUMNS_CONFIG);
        if (columns == null) return null;

        StructSchema schema = Schema.struct();
        for (String column : columns.split(READER_FIELD_COLUMNS_SEPARATOR)) {
            if (!column.contains(":")) {
                throw new ConfigException(
                        "Invalid schema field definition, expecting input as NAME:TYPE, but got '" + column + "'");
            }
            String[] typeAndName = column.split(":");
            final String fieldName = typeAndName[0];
            final String fieldType = typeAndName[1];
            try {
                schema.field(fieldName, Schema.of(Type.forName(fieldType.toUpperCase())));
            } catch (IllegalArgumentException e) {
                final String types = Arrays
                        .stream(Type.values())
                        .map(Enum::name)
                        .collect(Collectors.joining(", ", "[", "]"));
                throw new ConfigException(
                        "Invalid schema field definition, unknown type '" + fieldType + "', expecting one of : " + types);
            }
        }

        return schema;
    }

    public static ConfigDef configDef() {
        int filterGroupCounter = 0;
        return new ConfigDef(CommonFilterConfig.configDef())
                .define(
                        READER_EXTRACT_COLUMN_NAME_CONFIG,
                        ConfigDef.Type.STRING,
                        null,
                        ConfigDef.Importance.HIGH,
                        READER_EXTRACT_COLUMN_NAME_DOC,
                        GROUP_DELIMITED_ROW_FILTER,
                        filterGroupCounter++,
                        ConfigDef.Width.NONE,
                        READER_EXTRACT_COLUMN_NAME_CONFIG
                )
                .define(
                        READER_EXTRACT_COLUMN_NAME_CONFIG_ALIAS,
                        ConfigDef.Type.STRING,
                        null,
                        ConfigDef.Importance.HIGH,
                        "Deprecated. Use " + READER_EXTRACT_COLUMN_NAME_CONFIG + " instead.",
                        GROUP_DELIMITED_ROW_FILTER,
                        filterGroupCounter++,
                        ConfigDef.Width.NONE,
                        READER_EXTRACT_COLUMN_NAME_CONFIG_ALIAS
                )
                .define(
                        READER_FIELD_COLUMNS_CONFIG,
                        ConfigDef.Type.STRING,
                        null,
                        ConfigDef.Importance.HIGH,
                        READER_FIELD_COLUMNS_DOC,
                        GROUP_DELIMITED_ROW_FILTER,
                        filterGroupCounter++,
                        ConfigDef.Width.NONE,
                        READER_FIELD_COLUMNS_CONFIG
                )
                .define(
                        READER_AUTO_GENERATE_COLUMN_NAME_CONFIG,
                        ConfigDef.Type.BOOLEAN,
                        READER_AUTO_GENERATE_COLUMN_NAME_DEFAULT,
                        ConfigDef.Importance.HIGH,
                        READER_AUTO_GENERATE_COLUMN_NAME_DOC,
                        GROUP_DELIMITED_ROW_FILTER,
                        filterGroupCounter++,
                        ConfigDef.Width.NONE,
                        READER_AUTO_GENERATE_COLUMN_NAME_CONFIG
                )
                .define(
                        READER_AUTO_GENERATE_COLUMN_NAME_CONFIG_ALIAS,
                        ConfigDef.Type.BOOLEAN,
                        null,
                        ConfigDef.Importance.HIGH,
                        "Deprecated. Use " + READER_AUTO_GENERATE_COLUMN_NAME_CONFIG + " instead.",
                        GROUP_DELIMITED_ROW_FILTER,
                        filterGroupCounter++,
                        ConfigDef.Width.NONE,
                        READER_AUTO_GENERATE_COLUMN_NAME_CONFIG_ALIAS
                )
                .define(
                        READER_FIELD_DUPLICATE_COLUMNS_AS_ARRAY_CONFIG,
                        ConfigDef.Type.BOOLEAN,
                        READER_FIELD_DUPLICATE_COLUMNS_AS_ARRAY_DEFAULT,
                        ConfigDef.Importance.LOW,
                        READER_FIELD_DUPLICATE_COLUMNS_AS_ARRAY_DOC,
                        GROUP_DELIMITED_ROW_FILTER,
                        filterGroupCounter++,
                        ConfigDef.Width.NONE,
                        READER_FIELD_DUPLICATE_COLUMNS_AS_ARRAY_CONFIG
                )
                .define(
                        READER_FIELD_DUPLICATE_COLUMNS_AS_ARRAY_CONFIG_ALIAS,
                        ConfigDef.Type.BOOLEAN,
                        null,
                        ConfigDef.Importance.HIGH,
                        "Deprecated. Use " + READER_FIELD_DUPLICATE_COLUMNS_AS_ARRAY_CONFIG + " instead.",
                        GROUP_DELIMITED_ROW_FILTER,
                        filterGroupCounter++,
                        ConfigDef.Width.NONE,
                        READER_FIELD_DUPLICATE_COLUMNS_AS_ARRAY_CONFIG_ALIAS
                )
                .define(
                        READER_FIELD_TRIM_COLUMN_CONFIG,
                        ConfigDef.Type.BOOLEAN,
                        READER_FIELD_TRIM_COLUMN_DEFAULT,
                        ConfigDef.Importance.LOW,
                        READER_FIELD_TRIM_COLUMN_DOC,
                        GROUP_DELIMITED_ROW_FILTER,
                        filterGroupCounter++,
                        ConfigDef.Width.NONE,
                        READER_FIELD_TRIM_COLUMN_CONFIG
                )
                .define(
                        READER_FIELD_TRIM_COLUMN_CONFIG_ALIAS,
                        ConfigDef.Type.BOOLEAN,
                        null,
                        ConfigDef.Importance.HIGH,
                        "Deprecated. Use " + READER_FIELD_TRIM_COLUMN_CONFIG + " instead.",
                        GROUP_DELIMITED_ROW_FILTER,
                        filterGroupCounter++,
                        ConfigDef.Width.NONE,
                        READER_FIELD_TRIM_COLUMN_CONFIG_ALIAS
                );
    }
}
